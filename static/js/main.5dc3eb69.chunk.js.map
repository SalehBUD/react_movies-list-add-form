{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","trim","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isDisabled","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","prevMoviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5dc3eb69.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string;\n  value: string;\n  label?: string;\n  required?: boolean;\n  onChange?: (newValue: string) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value.trim();\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={(event) => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && <p className=\"help is-danger\">{`${label} is required`}</p>}\n    </div>\n  );\n};\n","import { FC, useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ninterface Props {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const NewMovie: FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const fieldsToDefault = () => {\n    setCount((prevCount) => prevCount + 1);\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(movie);\n\n    fieldsToDefault();\n  };\n\n  const isDisabled\n    = !title.trim() || !imgUrl.trim() || !imdbUrl.trim() || !imdbId.trim();\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => setMovies(\n    (prevMoviesList) => [...prevMoviesList, movie],\n  );\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}